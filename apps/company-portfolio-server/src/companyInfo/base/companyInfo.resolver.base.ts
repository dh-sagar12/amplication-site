/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { CompanyInfo } from "./CompanyInfo";
import { CompanyInfoCountArgs } from "./CompanyInfoCountArgs";
import { CompanyInfoFindManyArgs } from "./CompanyInfoFindManyArgs";
import { CompanyInfoFindUniqueArgs } from "./CompanyInfoFindUniqueArgs";
import { CreateCompanyInfoArgs } from "./CreateCompanyInfoArgs";
import { UpdateCompanyInfoArgs } from "./UpdateCompanyInfoArgs";
import { DeleteCompanyInfoArgs } from "./DeleteCompanyInfoArgs";
import { CompanyInfoService } from "../companyInfo.service";
@graphql.Resolver(() => CompanyInfo)
export class CompanyInfoResolverBase {
  constructor(protected readonly service: CompanyInfoService) {}

  async _companyInfosMeta(
    @graphql.Args() args: CompanyInfoCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [CompanyInfo])
  async companyInfos(
    @graphql.Args() args: CompanyInfoFindManyArgs
  ): Promise<CompanyInfo[]> {
    return this.service.companyInfos(args);
  }

  @graphql.Query(() => CompanyInfo, { nullable: true })
  async companyInfo(
    @graphql.Args() args: CompanyInfoFindUniqueArgs
  ): Promise<CompanyInfo | null> {
    const result = await this.service.companyInfo(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => CompanyInfo)
  async createCompanyInfo(
    @graphql.Args() args: CreateCompanyInfoArgs
  ): Promise<CompanyInfo> {
    return await this.service.createCompanyInfo({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => CompanyInfo)
  async updateCompanyInfo(
    @graphql.Args() args: UpdateCompanyInfoArgs
  ): Promise<CompanyInfo | null> {
    try {
      return await this.service.updateCompanyInfo({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => CompanyInfo)
  async deleteCompanyInfo(
    @graphql.Args() args: DeleteCompanyInfoArgs
  ): Promise<CompanyInfo | null> {
    try {
      return await this.service.deleteCompanyInfo(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
