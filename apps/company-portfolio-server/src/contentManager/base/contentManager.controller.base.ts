/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { ContentManagerService } from "../contentManager.service";
import { ContentManagerCreateInput } from "./ContentManagerCreateInput";
import { ContentManager } from "./ContentManager";
import { ContentManagerFindManyArgs } from "./ContentManagerFindManyArgs";
import { ContentManagerWhereUniqueInput } from "./ContentManagerWhereUniqueInput";
import { ContentManagerUpdateInput } from "./ContentManagerUpdateInput";

export class ContentManagerControllerBase {
  constructor(protected readonly service: ContentManagerService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: ContentManager })
  async createContentManager(
    @common.Body() data: ContentManagerCreateInput
  ): Promise<ContentManager> {
    return await this.service.createContentManager({
      data: data,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        content: true,
        section: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [ContentManager] })
  @ApiNestedQuery(ContentManagerFindManyArgs)
  async contentManagers(
    @common.Req() request: Request
  ): Promise<ContentManager[]> {
    const args = plainToClass(ContentManagerFindManyArgs, request.query);
    return this.service.contentManagers({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        content: true,
        section: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: ContentManager })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async contentManager(
    @common.Param() params: ContentManagerWhereUniqueInput
  ): Promise<ContentManager | null> {
    const result = await this.service.contentManager({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        content: true,
        section: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: ContentManager })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateContentManager(
    @common.Param() params: ContentManagerWhereUniqueInput,
    @common.Body() data: ContentManagerUpdateInput
  ): Promise<ContentManager | null> {
    try {
      return await this.service.updateContentManager({
        where: params,
        data: data,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          content: true,
          section: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: ContentManager })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteContentManager(
    @common.Param() params: ContentManagerWhereUniqueInput
  ): Promise<ContentManager | null> {
    try {
      return await this.service.deleteContentManager({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          content: true,
          section: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
