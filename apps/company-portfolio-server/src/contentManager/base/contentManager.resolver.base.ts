/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { ContentManager } from "./ContentManager";
import { ContentManagerCountArgs } from "./ContentManagerCountArgs";
import { ContentManagerFindManyArgs } from "./ContentManagerFindManyArgs";
import { ContentManagerFindUniqueArgs } from "./ContentManagerFindUniqueArgs";
import { CreateContentManagerArgs } from "./CreateContentManagerArgs";
import { UpdateContentManagerArgs } from "./UpdateContentManagerArgs";
import { DeleteContentManagerArgs } from "./DeleteContentManagerArgs";
import { ContentManagerService } from "../contentManager.service";
@graphql.Resolver(() => ContentManager)
export class ContentManagerResolverBase {
  constructor(protected readonly service: ContentManagerService) {}

  async _contentManagersMeta(
    @graphql.Args() args: ContentManagerCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [ContentManager])
  async contentManagers(
    @graphql.Args() args: ContentManagerFindManyArgs
  ): Promise<ContentManager[]> {
    return this.service.contentManagers(args);
  }

  @graphql.Query(() => ContentManager, { nullable: true })
  async contentManager(
    @graphql.Args() args: ContentManagerFindUniqueArgs
  ): Promise<ContentManager | null> {
    const result = await this.service.contentManager(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => ContentManager)
  async createContentManager(
    @graphql.Args() args: CreateContentManagerArgs
  ): Promise<ContentManager> {
    return await this.service.createContentManager({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => ContentManager)
  async updateContentManager(
    @graphql.Args() args: UpdateContentManagerArgs
  ): Promise<ContentManager | null> {
    try {
      return await this.service.updateContentManager({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => ContentManager)
  async deleteContentManager(
    @graphql.Args() args: DeleteContentManagerArgs
  ): Promise<ContentManager | null> {
    try {
      return await this.service.deleteContentManager(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
