/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, ContentManager as PrismaContentManager } from "@prisma/client";

export class ContentManagerServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.ContentManagerCountArgs, "select">
  ): Promise<number> {
    return this.prisma.contentManager.count(args);
  }

  async contentManagers(
    args: Prisma.ContentManagerFindManyArgs
  ): Promise<PrismaContentManager[]> {
    return this.prisma.contentManager.findMany(args);
  }
  async contentManager(
    args: Prisma.ContentManagerFindUniqueArgs
  ): Promise<PrismaContentManager | null> {
    return this.prisma.contentManager.findUnique(args);
  }
  async createContentManager(
    args: Prisma.ContentManagerCreateArgs
  ): Promise<PrismaContentManager> {
    return this.prisma.contentManager.create(args);
  }
  async updateContentManager(
    args: Prisma.ContentManagerUpdateArgs
  ): Promise<PrismaContentManager> {
    return this.prisma.contentManager.update(args);
  }
  async deleteContentManager(
    args: Prisma.ContentManagerDeleteArgs
  ): Promise<PrismaContentManager> {
    return this.prisma.contentManager.delete(args);
  }
}
