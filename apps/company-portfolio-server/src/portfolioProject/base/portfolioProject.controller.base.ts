/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { PortfolioProjectService } from "../portfolioProject.service";
import { PortfolioProjectCreateInput } from "./PortfolioProjectCreateInput";
import { PortfolioProject } from "./PortfolioProject";
import { PortfolioProjectFindManyArgs } from "./PortfolioProjectFindManyArgs";
import { PortfolioProjectWhereUniqueInput } from "./PortfolioProjectWhereUniqueInput";
import { PortfolioProjectUpdateInput } from "./PortfolioProjectUpdateInput";

export class PortfolioProjectControllerBase {
  constructor(protected readonly service: PortfolioProjectService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: PortfolioProject })
  async createPortfolioProject(
    @common.Body() data: PortfolioProjectCreateInput
  ): Promise<PortfolioProject> {
    return await this.service.createPortfolioProject({
      data: data,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        title: true,
        description: true,
        image: true,
        projectDate: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [PortfolioProject] })
  @ApiNestedQuery(PortfolioProjectFindManyArgs)
  async portfolioProjects(
    @common.Req() request: Request
  ): Promise<PortfolioProject[]> {
    const args = plainToClass(PortfolioProjectFindManyArgs, request.query);
    return this.service.portfolioProjects({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        title: true,
        description: true,
        image: true,
        projectDate: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: PortfolioProject })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async portfolioProject(
    @common.Param() params: PortfolioProjectWhereUniqueInput
  ): Promise<PortfolioProject | null> {
    const result = await this.service.portfolioProject({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        title: true,
        description: true,
        image: true,
        projectDate: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: PortfolioProject })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updatePortfolioProject(
    @common.Param() params: PortfolioProjectWhereUniqueInput,
    @common.Body() data: PortfolioProjectUpdateInput
  ): Promise<PortfolioProject | null> {
    try {
      return await this.service.updatePortfolioProject({
        where: params,
        data: data,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          title: true,
          description: true,
          image: true,
          projectDate: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: PortfolioProject })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deletePortfolioProject(
    @common.Param() params: PortfolioProjectWhereUniqueInput
  ): Promise<PortfolioProject | null> {
    try {
      return await this.service.deletePortfolioProject({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          title: true,
          description: true,
          image: true,
          projectDate: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
