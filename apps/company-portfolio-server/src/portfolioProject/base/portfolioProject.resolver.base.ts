/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { PortfolioProject } from "./PortfolioProject";
import { PortfolioProjectCountArgs } from "./PortfolioProjectCountArgs";
import { PortfolioProjectFindManyArgs } from "./PortfolioProjectFindManyArgs";
import { PortfolioProjectFindUniqueArgs } from "./PortfolioProjectFindUniqueArgs";
import { CreatePortfolioProjectArgs } from "./CreatePortfolioProjectArgs";
import { UpdatePortfolioProjectArgs } from "./UpdatePortfolioProjectArgs";
import { DeletePortfolioProjectArgs } from "./DeletePortfolioProjectArgs";
import { PortfolioProjectService } from "../portfolioProject.service";
@graphql.Resolver(() => PortfolioProject)
export class PortfolioProjectResolverBase {
  constructor(protected readonly service: PortfolioProjectService) {}

  async _portfolioProjectsMeta(
    @graphql.Args() args: PortfolioProjectCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [PortfolioProject])
  async portfolioProjects(
    @graphql.Args() args: PortfolioProjectFindManyArgs
  ): Promise<PortfolioProject[]> {
    return this.service.portfolioProjects(args);
  }

  @graphql.Query(() => PortfolioProject, { nullable: true })
  async portfolioProject(
    @graphql.Args() args: PortfolioProjectFindUniqueArgs
  ): Promise<PortfolioProject | null> {
    const result = await this.service.portfolioProject(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => PortfolioProject)
  async createPortfolioProject(
    @graphql.Args() args: CreatePortfolioProjectArgs
  ): Promise<PortfolioProject> {
    return await this.service.createPortfolioProject({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => PortfolioProject)
  async updatePortfolioProject(
    @graphql.Args() args: UpdatePortfolioProjectArgs
  ): Promise<PortfolioProject | null> {
    try {
      return await this.service.updatePortfolioProject({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => PortfolioProject)
  async deletePortfolioProject(
    @graphql.Args() args: DeletePortfolioProjectArgs
  ): Promise<PortfolioProject | null> {
    try {
      return await this.service.deletePortfolioProject(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
